
pipeline {
    agent any
    environment {
        VENV_PATH = "venv"
        REPORTS_DIR = "reports"
    }
    stages {
        stage('Preparacion') {
            steps {
                bat '''
                    echo ========================
                    echo WHOAMI:
                    whoami
                    echo HOSTNAME:
                    hostname
                    echo WORKSPACE:
                    echo %WORKSPACE%
                    echo ========================
                    python --version
                    python -m venv %VENV_PATH%
                    call %VENV_PATH%\\Scripts\\activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }
        stage('Test') {
            agent { label 'test-agent' }
            steps {
              bat '''
                call %VENV_PATH%\\Scripts\\activate
                pytest --junitxml=reports\\unit-test-results.xml || exit 0
            '''
            }
            post {
              always {
             junit testResults: 'reports/unit-test-results.xml', checksName: ''
            }
        }
        stage('Coverage') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    coverage run -m pytest || exit 0
                    coverage xml -o %REPORTS_DIR%\\coverage.xml
                '''
            }
        }
        stage('Analisis Estatico (Flake8)') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    flake8 --format=default app/ > %REPORTS_DIR%\\flake8-report.txt || exit 0
                '''
            }
            post {
                always {
                    recordIssues tools: [flake8(pattern: 'reports/flake8-report.txt')],
                     healthy: 0,
                     unhealthy: 10,
                     minimumSeverity: 'NORMAL'    
                }
            }
        }
        stage('Security Test (bandit)') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    mkdir %REPORTS_DIR%
                    bandit -r app/ -f sarif -o %REPORTS_DIR%\\bandit-report.sarif || exit 0
                '''
            }
            post {
                always {
                    recordIssues tools: [sarif(pattern: 'reports/bandit-report.sarif')], qualityGates: [
                    [threshold: 2, type: 'TOTAL', unstable: true],
                    [threshold: 4, type: 'TOTAL', failure: true]
                 ]
                }
            }
        }
        stage('Performance') {
            steps {
                bat '''
                    whoami
                    hostname
                    echo %WORKSPACE%
                    set JMETER_HOME=C:\\Users\\USER\\Downloads\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3
                    set PATH=%JMETER_HOME%\\bin;%PATH%
                    del /q jmeter\\report.jtl
                    rmdir /s /q jmeter\\report
                    mkdir jmeter\\report
                    jmeter -n -t test\\testplan\\sumar_restar.jmx -l jmeter\\report.jtl -e -o jmeter\\report

                '''
            }
        }
    }
    post {
        always {
            junit testResults: 'reports/unit-test-results.xml', checksName: ''
        }
    }
}
