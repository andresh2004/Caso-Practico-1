
pipeline {
    agent any
    environment {
        VENV_PATH = "venv"
        REPORTS_DIR = "reports"
    }
    stages {
        stage('Preparacion') {
            steps {
                bat '''
                    echo ========================
                    echo WHOAMI:
                    whoami
                    echo HOSTNAME:
                    hostname
                    echo WORKSPACE:
                    echo %WORKSPACE%
                    echo ========================
                    python --version
                    python -m venv %VENV_PATH%
                    call %VENV_PATH%\\Scripts\\activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }
        stage('Test') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    mkdir %REPORTS_DIR%
                    pytest --junitxml=%REPORTS_DIR%\\unit-test-results.xml || exit 0
                '''
            }
        }
        stage('Coverage') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    coverage run -m pytest || exit 0
                    coverage xml -o %REPORTS_DIR%\\coverage.xml
                '''
            }
        }
        stage('Analisis Estatico (Flake8)') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    flake8 --format=default app/ > %REPORTS_DIR%\\flake8-report.txt || exit 0
                '''
            }
            post {
                always {
                    recordIssues tools: [flake8(pattern: 'reports/flake8-report.txt')], qualityGates: 
                    [[threshold: 8, type: 'TOTAL', unstable: true],
                    [threshold: 10, type: 'TOTAL', failure: true]
                  ]                                                                      
                }
            }
        }
        stage('Security Test (bandit)') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    mkdir %REPORTS_DIR%
                    bandit -r app/ -f sarif -o %REPORTS_DIR%\\bandit-report.sarif || exit 0
                '''
            }
            post {
                always {
                    recordIssues tools: [sarif(pattern: 'reports/bandit-report.sarif')], qualityGates: [
                    [threshold: 2, type: 'TOTAL', unstable: true],
                    [threshold: 4, type: 'TOTAL', failure: true]
                 ]
                }
            }
        }
        stage('Performance') {
            steps {
                bat '''
                    call %VENV_PATH%\\Scripts\\activate
                    jmeter -n -t performance/test.jmx -l %REPORTS_DIR%\\report.jtl -e -o %REPORTS_DIR%\\dashboard || exit 0
                '''
            }
        }
    }
    post {
        always {
            junit 'reports/unit-test-results.xml'
            publishCoverage adapters: [coberturaAdapter('reports/coverage.xml')], sourceFileResolver: sourceFiles('NEVER_STORE')
            performanceReport sourceDataFiles: 'reports/report.jtl'
        }
    }
}
